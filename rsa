#!/usr/bin/env python3
import sys
import math

def gcd(a, b):
    """
    Calculate the greatest common divisor (GCD) of two numbers using Euclid's algorithm.
    """
    while b:
        a, b = b, a % b
    return a

def pollard_rho(n):
    """
    Pollard's rho algorithm for integer factorization.
    """
    if n % 2 == 0:
        return 2
    x = 2
    y = 2
    d = 1
    f = lambda x: (x**2 + 1) % n
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)
    return d

def factorize_rsa(n):
    """
    Factorize an RSA number into its prime factors.
    """
    factors = []
    while n > 1:
        factor = pollard_rho(n)
        factors.append(factor)
        n //= factor
    return factors

def main(filename):
    """
    Main function to read an RSA number from a file and factorize it into prime factors.
    """
    try:
        with open(filename, 'r') as file:
            for line in file:
                n = int(line.strip())
                factors = factorize_rsa(n)
                print(f"{n}={'*'.join(map(str, factors))}")
    except FileNotFoundError:
        print(f"File not found: {filename}")
    except ValueError:
        print(f"Invalid data in file: {filename}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: rsa <file>")
        sys.exit(1)
    main(sys.argv[1])
